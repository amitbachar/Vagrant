# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
VAGRANTFILE_API_VERSION = "2"

$script = <<-SCRIPT
echo I am provisioning...
date > /etc/vagrant_provisioned_at
SCRIPT

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
#Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.

  #Box location 
  #config.vm.box_url = "centos"
  config.vm.box = "centos/7"
  config.vm.hostname = "myCentos7.bachar.com"
  config.vm.provider "virtualbox" do |v|
      v.memory = 1024
      #v.name = "myCentos7"
      #file_to_disk = '2nd_disk.vdi'
      #v.customize ['createhd', '--filename', file_to_disk, '--size', 5 * 1024]  
      #v.customize ['storageattach', :id, '--storagectl', 'SATA', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', file_to_disk]
  end
  #config.vm.synced_folder "TOKEN_PERFORCE_WORKSPACE_DIR_WIN", "TOKEN_PERFORCE_WORKSPACE_DIR_LINUX"
  #config.vm.synced_folder "host/src/", "/guest/srv/"
  #config.vm.provision :shell, :args => ENV['P4DETAILS'], inline: $script
  config.vm.network "private_network", type: "dhcp"
  #config.vm.network "private_network", ip: "192.168.50.4"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
     
      printline() {
              echo "==============================================================="
      }
     # install ifconfig
     sudo yum install net-tools -y;
     # install ansible
     sudo yum install ansible -y;
     ansible --version;
     # install git
     sudo yum install -y git
     echo ssh vagrant@`ifconfig -a eth1 | grep "inet " | awk '{print $2}'`
     # enable ssh login with username and password
     sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config;
     sudo systemctl restart sshd;
     sudo systemctl status sshd;
     #ssh-keygen -b 2048 -t rsa -f ~/.ssh/MyCentos7_vagrant_sshkey -q -N "" -C "amit.bachar@gmail.com"
     #ssh-keygen -b 2048 -t rsa -f ~/.ssh/sshkey -q -N ""
     pwd
     id
     # copy ssh keys for git clone
     if [ ! -d ~vagrant/.ssh ]
     then
        mkdir ~vagrant/.ssh
     fi
     sudo -u vagrant cp /vagrant/.ssh/MyCentos7_vagrant_sshkey ~vagrant/.ssh 
     sudo -u vagrant cp /vagrant/.ssh/MyCentos7_vagrant_sshkey.pub ~vagrant/.ssh
     chmod 400 ~vagrant/.ssh/MyCentos7_vagrant_sshkey*
     eval $(ssh-agent -s)
     ssh-add ~vagrant/.ssh/MyCentos7_vagrant_sshkey
     #tee -a c << END
     #Host github.com
     #      StrictHostKeyChecking no
     #      UserKnownHostsFile=/dev/null
     #END
     sudo -u vagrant touch ~vagrant/.ssh/config
     #cat << EOF >> ~vagrant/.ssh/config
     #   Host github.com
     #     StrictHostKeyChecking no
     #     UserKnownHostsFile=/dev/null
     #EOF

     #chmod 400 ~vagrant/.ssh/config
     GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" git clone git@github.com:amitbachar/Vagrant.git
     #git config --global core.sshCommand ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no
     #git clone git@github.com:amitbachar/Vagrant.git
     printline
     ifconfig -a | grep "inet ";
     printline
     echo ssh vagrant@`ifconfig -a eth1 | grep "inet " | awk '{print $2}'`
     echo 'happy vagranting '
   SHELL
  #onfig.vm.provision :shell, :args => 'hello, world!' , inline: $script
  #config.vm.provision :shell, path: "bootstrap.sh"
  #config.vm.provision "shell" do |s|
  #  s.inline = $script
  #  s.args   = "'hello, world!'"
  #end
end
